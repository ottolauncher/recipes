scalar Map

interface BaseModel {
    id: ID!
    name: String!
    slug: String
}
type Ingredient implements BaseModel{
    id: ID!
    name: String!
    slug: String
    type: String!
    quantity: Int!
}

type Recipe implements BaseModel {
    id: ID!
    name: String!
    slug: String
    timers: [String!]
    steps:[String!]
    imageURL: String!
    originalURL: String!
    ingredients: [Ingredient!]!
}

input NewIngredient {
    name: String!
    type: String!
    quantity: Int!
}

input UpdateIngredient {
    id: ID!
    name: String!
    type: String!
    quantity: Int!
}

input NewRecipe {
    name: String!
    timers: [String!]
    steps:[String!]
    imageURL: String!
    originalURL: String!
    ingredients: [NewIngredient!]!
}

input UpdateRecipe {
    id: ID!
     name: String!
    timers: [String!]
    steps:[String!]
    imageURL: String!
    originalURL: String!
    ingredients: [UpdateIngredient!]!
}

union SearchRecipeResult = Recipe | Ingredient

type Mutation {
  createIngredient(input: NewIngredient!): Ingredient!
  updateIngredient(input: UpdateIngredient): Ingredient!
  deleteIngredient(filter: Map!): Boolean!

  createRecipe(input: NewRecipe!): Recipe!
  updateRecipe(input: UpdateRecipe!): Recipe!
  deleteRecipe(filter: Map!): Boolean!
}

type Query {
  ingredient(filter: Map!): Ingredient!
  ingredients(filter: Map!, limit: Int=12, page:Int=1):[Ingredient!]!

  recipe(filter: Map!): Recipe!
  recipes(filter: Map!, limit: Int=12, page:Int=1):[Recipe!]!

  search(query: String!, limit: Int=12, page:Int=1):[SearchRecipeResult!]!
}

type Subscription {
    recipe: Recipe!
}